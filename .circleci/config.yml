version: 2.1

executors:
  node:
    parameters:
      browser:
        type: boolean
        default: false
      version:
        type: string
        default: lts
    docker:
      - image: circleci/node:<< parameters.version >><<# parameters.browser >>-browsers<</ parameters.browser >>
        entrypoint:
          - docker-init
          - --
          - <<# parameters.browser >>/<</ parameters.browser >>docker-entrypoint.sh
        command:
          - /bin/sh
    working_directory: ~/marp-cli

  docker:
    docker:
      - image: docker:git
    working_directory: ~/marp-cli

commands:
  install:
    parameters:
      postinstall:
        type: steps
        default: []
      yarn:
        type: string
        default: 1.17.3
    steps:
      # https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#upgradingdowngrading-yarn
      - run:
          name: Upgrade yarn
          command: |
            sudo -E sh -c 'curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
              && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
              && ln -snf /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
              && ln -snf /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
              && rm yarn-v$YARN_VERSION.tar.gz'
          environment:
            YARN_VERSION: << parameters.yarn >>

      - restore_cache:
          keys:
            - v2.1-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v2.1-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-
            - v2.1-dependencies-{{ .Environment.CIRCLE_JOB }}-

      - run: yarn install
      - steps: << parameters.postinstall >>

      - save_cache:
          key: v2.1-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-{{ .Branch }}
          paths:
            - node_modules
            - ~/.cache/yarn

  audit:
    steps:
      - checkout
      - install:
          postinstall:
            - run: yarn audit

  test:
    steps:
      - run: node --version

      - checkout
      - install

      - run:
          name: Prettier formatting
          command: yarn check:format

      - run:
          name: TypeScript type checking
          command: yarn check:ts

      - run:
          name: TSLint
          command: yarn lint:ts

      - run:
          name: stylelint
          command: yarn lint:css

      - run:
          name: Jest
          command: yarn test:coverage --ci -i --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: tmp/test-results

      - run: yarn codecov

      - store_test_results:
          path: tmp/test-results

      - store_artifacts:
          path: ./coverage
          destination: coverage

  docker:
    parameters:
      tag:
        type: string
        default: latest
      user:
        type: env_var_name
        default: DOCKER_USER
      pass:
        type: env_var_name
        default: DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: docker build --no-cache -t marpteam/marp-cli:<< parameters.tag >> .

      - run:
          name: Push to Docker Hub
          command: |
            docker login -u ${<< parameters.user >>} -p ${<< parameters.pass >>}
            docker push marpteam/marp-cli:<< parameters.tag >>

jobs:
  audit:
    executor: node
    steps:
      - audit

  test-node8:
    executor:
      name: node
      browser: true
      version: '8'
    steps:
      - test

  test-node10:
    executor:
      name: node
      browser: true
      version: '10.16.3' # Specify LTS version for development
    steps:
      - test

  test-node12:
    executor:
      name: node
      browser: true
      version: '12'
    steps:
      - test

  docker-image-latest:
    executor: docker
    steps:
      - docker:
          tag: latest

  docker-image-tag:
    executor: docker
    steps:
      - docker:
          tag: $CIRCLE_TAG

workflows:
  test:
    jobs:
      - audit
      - test-node8:
          requires:
            - audit
      - test-node10:
          requires:
            - audit
      - test-node12:
          requires:
            - audit
      - docker-image-latest:
          requires:
            - test-node8
            - test-node10
            - test-node12
          filters:
            branches:
              only: master
      - docker-image-tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
